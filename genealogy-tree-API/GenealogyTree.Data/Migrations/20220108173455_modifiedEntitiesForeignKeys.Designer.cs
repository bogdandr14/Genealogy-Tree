// <auto-generated />
using System;
using GenealogyTree.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace GenealogyTree.Data.Migrations
{
    [DbContext(typeof(GenealogyTreeDbContext))]
    [Migration("20220108173455_modifiedEntitiesForeignKeys")]
    partial class modifiedEntitiesForeignKeys
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("GenealogyTree.Domain.Entities.Education", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EducationInstituteName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EducationLevelId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EducationLevelId");

                    b.HasIndex("UserId");

                    b.ToTable("Educations");
                });

            modelBuilder.Entity("GenealogyTree.Domain.Entities.EducationLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("EducationLevels");
                });

            modelBuilder.Entity("GenealogyTree.Domain.Entities.Gender", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Genders");
                });

            modelBuilder.Entity("GenealogyTree.Domain.Entities.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("GenealogyTree.Domain.Entities.Marriage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("FirstPersonId")
                        .HasColumnType("int");

                    b.Property<int>("SecondPersonId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("FirstPersonId");

                    b.HasIndex("SecondPersonId");

                    b.ToTable("Marriages");
                });

            modelBuilder.Entity("GenealogyTree.Domain.Entities.Nationality", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Nationalities");
                });

            modelBuilder.Entity("GenealogyTree.Domain.Entities.Occupation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OccupationName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("WorkingPlaceName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Occupations");
                });

            modelBuilder.Entity("GenealogyTree.Domain.Entities.ParentChild", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("BloodRelatives")
                        .HasColumnType("bit");

                    b.Property<int>("ChildId")
                        .HasColumnType("int");

                    b.Property<int>("ParentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ChildId");

                    b.HasIndex("ParentId");

                    b.ToTable("ParentsChildren");
                });

            modelBuilder.Entity("GenealogyTree.Domain.Entities.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("BirthPlaceId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeathDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("GenderId")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LivingPlaceId")
                        .HasColumnType("int");

                    b.Property<int?>("NationalityId")
                        .HasColumnType("int");

                    b.Property<int?>("ReligionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BirthPlaceId");

                    b.HasIndex("GenderId");

                    b.HasIndex("LivingPlaceId");

                    b.HasIndex("NationalityId");

                    b.HasIndex("ReligionId");

                    b.ToTable("People");
                });

            modelBuilder.Entity("GenealogyTree.Domain.Entities.Religion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Religions");
                });

            modelBuilder.Entity("GenealogyTree.Domain.Entities.Sync", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PrimaryUserId")
                        .HasColumnType("int");

                    b.Property<int>("SyncedPersonInPrimaryTreeId")
                        .HasColumnType("int");

                    b.Property<int>("SyncedUserId")
                        .HasColumnType("int");

                    b.Property<int?>("SynchedUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PrimaryUserId");

                    b.HasIndex("SyncedPersonInPrimaryTreeId")
                        .IsUnique();

                    b.HasIndex("SyncedUserId");

                    b.ToTable("Syncs");
                });

            modelBuilder.Entity("GenealogyTree.Domain.Entities.SyncRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ReceiverId")
                        .HasColumnType("int");

                    b.Property<int>("ReceiverReferenceInSenderTreeId")
                        .HasColumnType("int");

                    b.Property<bool>("ReceiverResponded")
                        .HasColumnType("bit");

                    b.Property<bool>("Response")
                        .HasColumnType("bit");

                    b.Property<int>("SenderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("ReceiverReferenceInSenderTreeId");

                    b.HasIndex("SenderId");

                    b.ToTable("SyncRequests");
                });

            modelBuilder.Entity("GenealogyTree.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("About")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastSyncCheck")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastTreeUpdate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("NotifyBirthdays")
                        .HasColumnType("bit");

                    b.Property<bool>("NotifyUpdates")
                        .HasColumnType("bit");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordSalt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SharePersonalInfo")
                        .HasColumnType("bit");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("GenealogyTree.Domain.Entities.Education", b =>
                {
                    b.HasOne("GenealogyTree.Domain.Entities.EducationLevel", "EducationLevel")
                        .WithMany("Educations")
                        .HasForeignKey("EducationLevelId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("GenealogyTree.Domain.Entities.User", "User")
                        .WithMany("Educations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("EducationLevel");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GenealogyTree.Domain.Entities.Marriage", b =>
                {
                    b.HasOne("GenealogyTree.Domain.Entities.Person", "FirstPerson")
                        .WithMany("FirstPersonMarriages")
                        .HasForeignKey("FirstPersonId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("GenealogyTree.Domain.Entities.Person", "SecondPerson")
                        .WithMany("SecondPersonMarriages")
                        .HasForeignKey("SecondPersonId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("FirstPerson");

                    b.Navigation("SecondPerson");
                });

            modelBuilder.Entity("GenealogyTree.Domain.Entities.Occupation", b =>
                {
                    b.HasOne("GenealogyTree.Domain.Entities.User", "User")
                        .WithMany("Occupations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("GenealogyTree.Domain.Entities.ParentChild", b =>
                {
                    b.HasOne("GenealogyTree.Domain.Entities.Person", "Child")
                        .WithMany("Parents")
                        .HasForeignKey("ChildId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("GenealogyTree.Domain.Entities.Person", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Child");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("GenealogyTree.Domain.Entities.Person", b =>
                {
                    b.HasOne("GenealogyTree.Domain.Entities.Location", "BirthPlace")
                        .WithMany("PeopleBornHere")
                        .HasForeignKey("BirthPlaceId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("GenealogyTree.Domain.Entities.Gender", "Gender")
                        .WithMany("People")
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("GenealogyTree.Domain.Entities.Location", "LivingPlace")
                        .WithMany("PeopleLivingHere")
                        .HasForeignKey("LivingPlaceId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("GenealogyTree.Domain.Entities.Nationality", "Nationality")
                        .WithMany("People")
                        .HasForeignKey("NationalityId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("GenealogyTree.Domain.Entities.Religion", "Religion")
                        .WithMany("People")
                        .HasForeignKey("ReligionId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("BirthPlace");

                    b.Navigation("Gender");

                    b.Navigation("LivingPlace");

                    b.Navigation("Nationality");

                    b.Navigation("Religion");
                });

            modelBuilder.Entity("GenealogyTree.Domain.Entities.Sync", b =>
                {
                    b.HasOne("GenealogyTree.Domain.Entities.User", "PrimaryUser")
                        .WithMany("SyncedToUsers")
                        .HasForeignKey("PrimaryUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("GenealogyTree.Domain.Entities.Person", "SyncedPersonInPrimaryTree")
                        .WithOne("SyncedUserToPerson")
                        .HasForeignKey("GenealogyTree.Domain.Entities.Sync", "SyncedPersonInPrimaryTreeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("GenealogyTree.Domain.Entities.User", "SyncedUser")
                        .WithMany("SyncedByUsers")
                        .HasForeignKey("SyncedUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("PrimaryUser");

                    b.Navigation("SyncedPersonInPrimaryTree");

                    b.Navigation("SyncedUser");
                });

            modelBuilder.Entity("GenealogyTree.Domain.Entities.SyncRequest", b =>
                {
                    b.HasOne("GenealogyTree.Domain.Entities.User", "Receiver")
                        .WithMany("ReceivedRequests")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("GenealogyTree.Domain.Entities.Person", "ReceiverReferenceInSenderTree")
                        .WithMany("SenderSyncRequestsForPerson")
                        .HasForeignKey("ReceiverReferenceInSenderTreeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("GenealogyTree.Domain.Entities.User", "Sender")
                        .WithMany("SentRequests")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Receiver");

                    b.Navigation("ReceiverReferenceInSenderTree");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("GenealogyTree.Domain.Entities.User", b =>
                {
                    b.HasOne("GenealogyTree.Domain.Entities.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("GenealogyTree.Domain.Entities.EducationLevel", b =>
                {
                    b.Navigation("Educations");
                });

            modelBuilder.Entity("GenealogyTree.Domain.Entities.Gender", b =>
                {
                    b.Navigation("People");
                });

            modelBuilder.Entity("GenealogyTree.Domain.Entities.Location", b =>
                {
                    b.Navigation("PeopleBornHere");

                    b.Navigation("PeopleLivingHere");
                });

            modelBuilder.Entity("GenealogyTree.Domain.Entities.Nationality", b =>
                {
                    b.Navigation("People");
                });

            modelBuilder.Entity("GenealogyTree.Domain.Entities.Person", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("FirstPersonMarriages");

                    b.Navigation("Parents");

                    b.Navigation("SecondPersonMarriages");

                    b.Navigation("SenderSyncRequestsForPerson");

                    b.Navigation("SyncedUserToPerson");
                });

            modelBuilder.Entity("GenealogyTree.Domain.Entities.Religion", b =>
                {
                    b.Navigation("People");
                });

            modelBuilder.Entity("GenealogyTree.Domain.Entities.User", b =>
                {
                    b.Navigation("Educations");

                    b.Navigation("Occupations");

                    b.Navigation("ReceivedRequests");

                    b.Navigation("SentRequests");

                    b.Navigation("SyncedByUsers");

                    b.Navigation("SyncedToUsers");
                });
#pragma warning restore 612, 618
        }
    }
}
